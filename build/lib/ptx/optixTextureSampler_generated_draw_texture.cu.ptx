//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-26907403
// Cuda compilation tools, release 10.1, V10.1.243
// Based on LLVM 3.4svn
//

.version 6.4
.target sm_30
.address_size 64

	// .globl	_Z12draw_texturev
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.global .align 1 .b8 result_buffer[1];
.global .texref input_texture;
.global .align 8 .b8 launch_index[8];
.global .align 4 .b8 _ZN21rti_internal_typeinfo12launch_indexE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 1 .b8 _ZN21rti_internal_typename12launch_indexE[6] = {117, 105, 110, 116, 50, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum12launch_indexE = 4919;
.global .align 1 .b8 _ZN21rti_internal_semantic12launch_indexE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 1 .b8 _ZN23rti_internal_annotation12launch_indexE[1];
.global .align 1 .b8 $str[47] = {67, 97, 117, 103, 104, 116, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 48, 120, 37, 88, 32, 97, 116, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 40, 37, 100, 44, 37, 100, 41, 10, 0};

.visible .entry _Z12draw_texturev(

)
{
	.reg .f32 	%f<11>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<14>;


	mov.u64 	%rd12, result_buffer;
	cvta.global.u64 	%rd5, %rd12;
	mov.u32 	%r3, 2;
	mov.u32 	%r4, 16;
	// inline asm
	call (%rd1, %rd2, %rd3, %rd4), _rt_buffer_get_size_64, (%rd5, %r3, %r4);
	// inline asm
	ld.global.v2.u32 	{%r5, %r6}, [launch_index];
	cvt.rn.f32.u32	%f1, %r5;
	cvt.rn.f32.u32	%f2, %r6;
	cvt.rn.f32.u64	%f3, %rd1;
	cvt.rn.f32.u64	%f4, %rd2;
	div.approx.ftz.f32 	%f5, %f1, %f3;
	div.approx.ftz.f32 	%f6, %f2, %f4;
	cvt.u64.u32	%rd8, %r5;
	cvt.u64.u32	%rd9, %r6;
	mov.u64 	%rd11, 0;
	// inline asm
	call (%rd6), _rt_buffer_get_64, (%rd5, %r3, %r4, %rd8, %rd9, %rd11, %rd11);
	// inline asm
	tex.2d.v4.u32.f32	{%r9, %r10, %r11, %r12}, [input_texture, {%f5, %f6}];
	mov.b32 	 %f7, %r12;
	mov.b32 	 %f8, %r11;
	mov.b32 	 %f9, %r10;
	mov.b32 	 %f10, %r9;
	st.v4.f32 	[%rd6], {%f10, %f9, %f8, %f7};
	ret;
}

	// .globl	_Z9exceptionv
.visible .entry _Z9exceptionv(

)
{
	.local .align 8 .b8 	__local_depot1[16];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<2>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<12>;


	mov.u64 	%SPL, __local_depot1;
	cvta.local.u64 	%SP, %SPL;
	// inline asm
	call (%r4), _rt_get_exception_code, ();
	// inline asm
	ld.global.v2.u32 	{%r6, %r7}, [launch_index];
	// inline asm
	call (%r5), _rt_print_active, ();
	// inline asm
	setp.eq.s32	%p1, %r5, 0;
	@%p1 bra 	BB1_2;

	add.u64 	%rd1, %SP, 0;
	add.u64 	%rd2, %SPL, 0;
	st.local.v2.u32 	[%rd2], {%r4, %r6};
	st.local.u32 	[%rd2+8], %r7;
	mov.u64 	%rd3, $str;
	cvta.global.u64 	%rd4, %rd3;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd1;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r8, [retval0+0];
	
	//{
	}// Callseq End 0

BB1_2:
	ld.global.v2.u32 	{%r11, %r12}, [launch_index];
	cvt.u64.u32	%rd7, %r11;
	cvt.u64.u32	%rd8, %r12;
	mov.u64 	%rd11, result_buffer;
	cvta.global.u64 	%rd6, %rd11;
	mov.u32 	%r9, 2;
	mov.u32 	%r10, 16;
	mov.u64 	%rd10, 0;
	// inline asm
	call (%rd5), _rt_buffer_get_64, (%rd6, %r9, %r10, %rd7, %rd8, %rd10, %rd10);
	// inline asm
	mov.f32 	%f1, 0f3F800000;
	mov.f32 	%f2, 0f00000000;
	st.v4.f32 	[%rd5], {%f2, %f1, %f2, %f2};
	ret;
}


