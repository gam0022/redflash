//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-26907403
// Cuda compilation tools, release 10.1, V10.1.243
// Based on LLVM 3.4svn
//

.version 6.4
.target sm_30
.address_size 64

	// .globl	_Z18particle_intersecti
.global .align 1 .b8 positions_buffer[1];
.global .align 1 .b8 velocities_buffer[1];
.global .align 1 .b8 colors_buffer[1];
.global .align 1 .b8 radii_buffer[1];
.global .align 4 .f32 motion_blur;
.global .align 4 .b8 particle_position[12];
.global .align 4 .b8 particle_color[12];
.global .align 4 .b8 ray[36];
.global .align 4 .f32 cur_time;
.global .align 4 .b8 _ZN21rti_internal_typeinfo11motion_blurE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo17particle_positionE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14particle_colorE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo3rayE[8] = {82, 97, 121, 0, 36, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8cur_timeE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 1 .b8 _ZN21rti_internal_typename11motion_blurE[6] = {102, 108, 111, 97, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename17particle_positionE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename14particle_colorE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename3rayE[11] = {111, 112, 116, 105, 120, 58, 58, 82, 97, 121, 0};
.global .align 1 .b8 _ZN21rti_internal_typename8cur_timeE[6] = {102, 108, 111, 97, 116, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum11motion_blurE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum17particle_positionE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14particle_colorE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum3rayE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8cur_timeE = 4919;
.global .align 1 .b8 _ZN21rti_internal_semantic11motion_blurE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic17particle_positionE[28] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 112, 97, 114, 116, 105, 99, 108, 101, 95, 112, 111, 115, 105, 116, 105, 111, 110, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic14particle_colorE[25] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 112, 97, 114, 116, 105, 99, 108, 101, 95, 99, 111, 108, 111, 114, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic3rayE[13] = {114, 116, 67, 117, 114, 114, 101, 110, 116, 82, 97, 121, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic8cur_timeE[14] = {114, 116, 67, 117, 114, 114, 101, 110, 116, 84, 105, 109, 101, 0};
.global .align 1 .b8 _ZN23rti_internal_annotation11motion_blurE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation17particle_positionE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14particle_colorE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation3rayE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8cur_timeE[1];

.visible .entry _Z18particle_intersecti(
	.param .u32 _Z18particle_intersecti_param_0
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<34>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<30>;


	ld.param.s32 	%rd10, [_Z18particle_intersecti_param_0];
	mov.u64 	%rd14, positions_buffer;
	cvta.global.u64 	%rd3, %rd14;
	mov.u32 	%r3, 1;
	mov.u32 	%r2, 12;
	mov.u64 	%rd13, 0;
	// inline asm
	call (%rd2), _rt_buffer_get_64, (%rd3, %r3, %r2, %rd10, %rd13, %rd13, %rd13);
	// inline asm
	ld.f32 	%f1, [%rd2];
	ld.f32 	%f2, [%rd2+4];
	ld.f32 	%f3, [%rd2+8];
	mov.u64 	%rd15, radii_buffer;
	cvta.global.u64 	%rd9, %rd15;
	mov.u32 	%r4, 4;
	// inline asm
	call (%rd8), _rt_buffer_get_64, (%rd9, %r3, %r4, %rd10, %rd13, %rd13, %rd13);
	// inline asm
	ld.global.f32 	%f7, [ray];
	sub.ftz.f32 	%f8, %f7, %f1;
	ld.global.f32 	%f9, [ray+4];
	sub.ftz.f32 	%f10, %f9, %f2;
	ld.global.f32 	%f11, [ray+8];
	sub.ftz.f32 	%f12, %f11, %f3;
	ld.global.f32 	%f13, [ray+12];
	ld.global.f32 	%f14, [ray+16];
	mul.ftz.f32 	%f15, %f10, %f14;
	fma.rn.ftz.f32 	%f16, %f8, %f13, %f15;
	ld.global.f32 	%f17, [ray+20];
	fma.rn.ftz.f32 	%f4, %f12, %f17, %f16;
	mul.ftz.f32 	%f18, %f10, %f10;
	fma.rn.ftz.f32 	%f19, %f8, %f8, %f18;
	fma.rn.ftz.f32 	%f20, %f12, %f12, %f19;
	ld.f32 	%f21, [%rd8];
	mul.ftz.f32 	%f22, %f21, %f21;
	sub.ftz.f32 	%f23, %f20, %f22;
	mul.ftz.f32 	%f24, %f4, %f4;
	sub.ftz.f32 	%f5, %f24, %f23;
	setp.leu.ftz.f32	%p1, %f5, 0f00000000;
	@%p1 bra 	BB0_5;

	sqrt.approx.ftz.f32 	%f6, %f5;
	neg.ftz.f32 	%f26, %f4;
	sub.ftz.f32 	%f25, %f26, %f6;
	// inline asm
	call (%r5), _rt_potential_intersection, (%f25);
	// inline asm
	setp.eq.s32	%p2, %r5, 0;
	@%p2 bra 	BB0_3;

	st.global.f32 	[particle_position], %f1;
	st.global.f32 	[particle_position+4], %f2;
	st.global.f32 	[particle_position+8], %f3;
	mov.u64 	%rd22, colors_buffer;
	cvta.global.u64 	%rd17, %rd22;
	// inline asm
	call (%rd16), _rt_buffer_get_64, (%rd17, %r3, %r2, %rd10, %rd13, %rd13, %rd13);
	// inline asm
	ld.f32 	%f27, [%rd16];
	ld.f32 	%f28, [%rd16+4];
	ld.f32 	%f29, [%rd16+8];
	st.global.f32 	[particle_color], %f27;
	st.global.f32 	[particle_color+4], %f28;
	st.global.f32 	[particle_color+8], %f29;
	mov.u32 	%r9, 0;
	// inline asm
	call (%r8), _rt_report_intersection, (%r9);
	// inline asm
	setp.ne.s32	%p3, %r8, 0;
	@%p3 bra 	BB0_5;

BB0_3:
	sub.ftz.f32 	%f30, %f6, %f4;
	// inline asm
	call (%r10), _rt_potential_intersection, (%f30);
	// inline asm
	setp.eq.s32	%p4, %r10, 0;
	@%p4 bra 	BB0_5;

	st.global.f32 	[particle_position], %f1;
	st.global.f32 	[particle_position+4], %f2;
	st.global.f32 	[particle_position+8], %f3;
	mov.u64 	%rd29, colors_buffer;
	cvta.global.u64 	%rd24, %rd29;
	// inline asm
	call (%rd23), _rt_buffer_get_64, (%rd24, %r3, %r2, %rd10, %rd13, %rd13, %rd13);
	// inline asm
	ld.f32 	%f31, [%rd23];
	ld.f32 	%f32, [%rd23+4];
	ld.f32 	%f33, [%rd23+8];
	st.global.f32 	[particle_color], %f31;
	st.global.f32 	[particle_color+4], %f32;
	st.global.f32 	[particle_color+8], %f33;
	mov.u32 	%r14, 0;
	// inline asm
	call (%r13), _rt_report_intersection, (%r14);
	// inline asm

BB0_5:
	ret;
}

	// .globl	_Z25particle_intersect_motioni
.visible .entry _Z25particle_intersect_motioni(
	.param .u32 _Z25particle_intersect_motioni_param_0
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<45>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<37>;


	ld.global.f32 	%f7, [cur_time];
	ld.param.s32 	%rd16, [_Z25particle_intersect_motioni_param_0];
	mov.u64 	%rd20, positions_buffer;
	cvta.global.u64 	%rd3, %rd20;
	mov.u32 	%r5, 1;
	mov.u32 	%r4, 12;
	mov.u64 	%rd19, 0;
	// inline asm
	call (%rd2), _rt_buffer_get_64, (%rd3, %r5, %r4, %rd16, %rd19, %rd19, %rd19);
	// inline asm
	ld.f32 	%f8, [%rd2];
	ld.f32 	%f9, [%rd2+4];
	ld.f32 	%f10, [%rd2+8];
	mov.u64 	%rd21, velocities_buffer;
	cvta.global.u64 	%rd9, %rd21;
	// inline asm
	call (%rd8), _rt_buffer_get_64, (%rd9, %r5, %r4, %rd16, %rd19, %rd19, %rd19);
	// inline asm
	ld.f32 	%f11, [%rd8];
	ld.f32 	%f12, [%rd8+4];
	ld.f32 	%f13, [%rd8+8];
	mul.ftz.f32 	%f14, %f7, %f11;
	mul.ftz.f32 	%f15, %f7, %f12;
	mul.ftz.f32 	%f16, %f7, %f13;
	ld.global.f32 	%f17, [motion_blur];
	fma.rn.ftz.f32 	%f1, %f17, %f14, %f8;
	fma.rn.ftz.f32 	%f2, %f17, %f15, %f9;
	fma.rn.ftz.f32 	%f3, %f17, %f16, %f10;
	mov.u64 	%rd22, radii_buffer;
	cvta.global.u64 	%rd15, %rd22;
	mov.u32 	%r6, 4;
	// inline asm
	call (%rd14), _rt_buffer_get_64, (%rd15, %r5, %r6, %rd16, %rd19, %rd19, %rd19);
	// inline asm
	ld.global.f32 	%f18, [ray];
	sub.ftz.f32 	%f19, %f18, %f1;
	ld.global.f32 	%f20, [ray+4];
	sub.ftz.f32 	%f21, %f20, %f2;
	ld.global.f32 	%f22, [ray+8];
	sub.ftz.f32 	%f23, %f22, %f3;
	ld.global.f32 	%f24, [ray+12];
	ld.global.f32 	%f25, [ray+16];
	mul.ftz.f32 	%f26, %f21, %f25;
	fma.rn.ftz.f32 	%f27, %f19, %f24, %f26;
	ld.global.f32 	%f28, [ray+20];
	fma.rn.ftz.f32 	%f4, %f23, %f28, %f27;
	mul.ftz.f32 	%f29, %f21, %f21;
	fma.rn.ftz.f32 	%f30, %f19, %f19, %f29;
	fma.rn.ftz.f32 	%f31, %f23, %f23, %f30;
	ld.f32 	%f32, [%rd14];
	mul.ftz.f32 	%f33, %f32, %f32;
	sub.ftz.f32 	%f34, %f31, %f33;
	mul.ftz.f32 	%f35, %f4, %f4;
	sub.ftz.f32 	%f5, %f35, %f34;
	setp.leu.ftz.f32	%p1, %f5, 0f00000000;
	@%p1 bra 	BB1_5;

	sqrt.approx.ftz.f32 	%f6, %f5;
	neg.ftz.f32 	%f37, %f4;
	sub.ftz.f32 	%f36, %f37, %f6;
	// inline asm
	call (%r7), _rt_potential_intersection, (%f36);
	// inline asm
	setp.eq.s32	%p2, %r7, 0;
	@%p2 bra 	BB1_3;

	st.global.f32 	[particle_position], %f1;
	st.global.f32 	[particle_position+4], %f2;
	st.global.f32 	[particle_position+8], %f3;
	mov.u64 	%rd29, colors_buffer;
	cvta.global.u64 	%rd24, %rd29;
	// inline asm
	call (%rd23), _rt_buffer_get_64, (%rd24, %r5, %r4, %rd16, %rd19, %rd19, %rd19);
	// inline asm
	ld.f32 	%f38, [%rd23];
	ld.f32 	%f39, [%rd23+4];
	ld.f32 	%f40, [%rd23+8];
	st.global.f32 	[particle_color], %f38;
	st.global.f32 	[particle_color+4], %f39;
	st.global.f32 	[particle_color+8], %f40;
	mov.u32 	%r11, 0;
	// inline asm
	call (%r10), _rt_report_intersection, (%r11);
	// inline asm
	setp.ne.s32	%p3, %r10, 0;
	@%p3 bra 	BB1_5;

BB1_3:
	sub.ftz.f32 	%f41, %f6, %f4;
	// inline asm
	call (%r12), _rt_potential_intersection, (%f41);
	// inline asm
	setp.eq.s32	%p4, %r12, 0;
	@%p4 bra 	BB1_5;

	st.global.f32 	[particle_position], %f1;
	st.global.f32 	[particle_position+4], %f2;
	st.global.f32 	[particle_position+8], %f3;
	mov.u64 	%rd36, colors_buffer;
	cvta.global.u64 	%rd31, %rd36;
	// inline asm
	call (%rd30), _rt_buffer_get_64, (%rd31, %r5, %r4, %rd16, %rd19, %rd19, %rd19);
	// inline asm
	ld.f32 	%f42, [%rd30];
	ld.f32 	%f43, [%rd30+4];
	ld.f32 	%f44, [%rd30+8];
	st.global.f32 	[particle_color], %f42;
	st.global.f32 	[particle_color+4], %f43;
	st.global.f32 	[particle_color+8], %f44;
	mov.u32 	%r16, 0;
	// inline asm
	call (%r15), _rt_report_intersection, (%r16);
	// inline asm

BB1_5:
	ret;
}

	// .globl	_Z15particle_boundsiPf
.visible .entry _Z15particle_boundsiPf(
	.param .u32 _Z15particle_boundsiPf_param_0,
	.param .u64 _Z15particle_boundsiPf_param_1
)
{
	.reg .f32 	%f<11>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<17>;


	ld.param.u64 	%rd13, [_Z15particle_boundsiPf_param_1];
	cvta.to.global.u64 	%rd14, %rd13;
	ld.param.s32 	%rd9, [_Z15particle_boundsiPf_param_0];
	mov.u64 	%rd15, positions_buffer;
	cvta.global.u64 	%rd2, %rd15;
	mov.u32 	%r3, 1;
	mov.u32 	%r2, 12;
	mov.u64 	%rd12, 0;
	// inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r3, %r2, %rd9, %rd12, %rd12, %rd12);
	// inline asm
	ld.f32 	%f1, [%rd1];
	ld.f32 	%f2, [%rd1+4];
	ld.f32 	%f3, [%rd1+8];
	mov.u64 	%rd16, radii_buffer;
	cvta.global.u64 	%rd8, %rd16;
	mov.u32 	%r4, 4;
	// inline asm
	call (%rd7), _rt_buffer_get_64, (%rd8, %r3, %r4, %rd9, %rd12, %rd12, %rd12);
	// inline asm
	ld.f32 	%f4, [%rd7];
	sub.ftz.f32 	%f5, %f1, %f4;
	st.global.f32 	[%rd14], %f5;
	sub.ftz.f32 	%f6, %f2, %f4;
	st.global.f32 	[%rd14+4], %f6;
	sub.ftz.f32 	%f7, %f3, %f4;
	st.global.f32 	[%rd14+8], %f7;
	add.ftz.f32 	%f8, %f1, %f4;
	st.global.f32 	[%rd14+12], %f8;
	add.ftz.f32 	%f9, %f2, %f4;
	st.global.f32 	[%rd14+16], %f9;
	add.ftz.f32 	%f10, %f3, %f4;
	st.global.f32 	[%rd14+20], %f10;
	ret;
}

	// .globl	_Z22particle_bounds_motioniiPf
.visible .entry _Z22particle_bounds_motioniiPf(
	.param .u32 _Z22particle_bounds_motioniiPf_param_0,
	.param .u32 _Z22particle_bounds_motioniiPf_param_1,
	.param .u64 _Z22particle_bounds_motioniiPf_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<24>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<25>;


	ld.param.u32 	%r3, [_Z22particle_bounds_motioniiPf_param_1];
	ld.param.u64 	%rd2, [_Z22particle_bounds_motioniiPf_param_2];
	ld.param.s32 	%rd5, [_Z22particle_bounds_motioniiPf_param_0];
	mov.u64 	%rd9, positions_buffer;
	cvta.global.u64 	%rd4, %rd9;
	mov.u32 	%r1, 1;
	mov.u32 	%r2, 12;
	mov.u64 	%rd8, 0;
	// inline asm
	call (%rd3), _rt_buffer_get_64, (%rd4, %r1, %r2, %rd5, %rd8, %rd8, %rd8);
	// inline asm
	ld.f32 	%f21, [%rd3];
	ld.f32 	%f22, [%rd3+4];
	ld.f32 	%f23, [%rd3+8];
	setp.lt.s32	%p1, %r3, 1;
	@%p1 bra 	BB3_2;

	mov.u64 	%rd16, velocities_buffer;
	cvta.global.u64 	%rd11, %rd16;
	// inline asm
	call (%rd10), _rt_buffer_get_64, (%rd11, %r1, %r2, %rd5, %rd8, %rd8, %rd8);
	// inline asm
	ld.f32 	%f10, [%rd10];
	ld.f32 	%f11, [%rd10+4];
	ld.f32 	%f12, [%rd10+8];
	ld.global.f32 	%f13, [motion_blur];
	fma.rn.ftz.f32 	%f21, %f10, %f13, %f21;
	fma.rn.ftz.f32 	%f22, %f11, %f13, %f22;
	fma.rn.ftz.f32 	%f23, %f12, %f13, %f23;

BB3_2:
	cvta.to.global.u64 	%rd23, %rd2;
	mov.u64 	%rd24, radii_buffer;
	cvta.global.u64 	%rd18, %rd24;
	mov.u32 	%r7, 4;
	// inline asm
	call (%rd17), _rt_buffer_get_64, (%rd18, %r1, %r7, %rd5, %rd8, %rd8, %rd8);
	// inline asm
	ld.f32 	%f14, [%rd17];
	sub.ftz.f32 	%f15, %f21, %f14;
	st.global.f32 	[%rd23], %f15;
	sub.ftz.f32 	%f16, %f22, %f14;
	st.global.f32 	[%rd23+4], %f16;
	sub.ftz.f32 	%f17, %f23, %f14;
	st.global.f32 	[%rd23+8], %f17;
	add.ftz.f32 	%f18, %f21, %f14;
	st.global.f32 	[%rd23+12], %f18;
	add.ftz.f32 	%f19, %f22, %f14;
	st.global.f32 	[%rd23+16], %f19;
	add.ftz.f32 	%f20, %f23, %f14;
	st.global.f32 	[%rd23+20], %f20;
	ret;
}


